<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[初来乍到的洛尘]]></title>
    <url>%2F2019%2F06%2F11%2Fhello-world%2F</url>
    <content type="text"><![CDATA[自我介绍&ensp;&ensp;&ensp;&ensp;我呢，是一个。。额。。咋形容呢，就是。。是一个偶尔发呆偶尔犯傻的一个孩子，今年呢 18 岁，嘿嘿，进入 IT 行业也已经一年多了，在没进来，这个行业之前觉得，哇塞，这个行业真的很神奇，很有神秘感，但是事实告诉我以上仅限想象行为。&ensp;&ensp;&ensp;&ensp;其实因为年龄问题，我受到过很多的质疑，咱也不知道年龄和技术有啥关系，咱也不敢问。当时求职的时候就感觉超级沮丧，因为受到很多的”打击”，曾经也一度想过放弃，但是吧，放弃又很不甘心，幸好皇天不负有心人，让我幸运的进入到了第一家公司，当时进去的时候真的是特别特别的认真学，大概就是上班吸收不了的知识晚上下班回家继续吸收，一天有二十四小时，真的是除了睡觉的时候，其余时间都是在学习，当然，我的努力也没有白费。&ensp;&ensp;&ensp;&ensp;在入职的第三个月的时候，我负责带一个项目，那是我第一次带领做项目，但是的心情吧，就是，咋说呢，很复杂！！一方面是激动，一方面是害怕，害怕是因为，我害怕让信任我的人失望，激动是因为，这种机会给了一个刚入职的菜鸟，主管都这么信任我了，如果我再让他失望，我觉得我真的就太失败了。我是个很感性的人，就是那种，别人对我好信任我，我就会百分之二百的回报给他的那种。&ensp;&ensp;&ensp;&ensp;在这个公司，我遇到了很多暖心的哥哥，其实职场上也没有那么”恐怖”，以前没进入社会的时候，都说怎么怎么样怎么怎么样，但是这种事情也只有亲身体验了才会知道，反正我感觉我很幸运，遇到的都是很贴心很暖的哥哥们（感觉以前就是电视剧看多了，给“吓”得），虽然偶尔毒舌，偶尔调皮！！但是我向他们请教问题，重来都不会说是不给讲，态度不好什么什么的，我们偶尔也会打闹，后来因为某些事情跳槽了。&ensp;&ensp;&ensp;&ensp;第二家公司其实也是朋友推荐才去的，刚开始的时候他们都感觉，哇，好小的小孩子，后来开始慢慢相处，从哥哥玩成朋友，记得听他们说的最多的一句话就是，我从来没有想过会和 00 后玩的那么好，后来曾经有一点时间特别想学习 Linux 但是由于自身条件不是很优秀，脑子有点笨，学了一段时间，感觉好难，然后公司里的运维哥哥就过来趁下班的时候帮我学习 Linux 真的特别特别感动，虽然每次教我的时候都喜欢’凶’我！！其实现在回想起来还是会忍不住的想要笑，记得他当时一直和我玩游戏还和女朋友发生过’争执’虽然我吃了不少狗粮 T_T||&ensp;&ensp;&ensp;&ensp;我不知道其他人的路是什么样子的，但是我觉得我真的是非常幸运了，每次遇到的人都很好，也许曾经会发生一些不愉快的事情，但是在我心里还是和他们的友情高于一切，当时走的时候，记得我一个很好的哥哥还给我发了一段朋友圈说，祝我以后有酒有肉有姑娘，想得到的都会得到，真的是给我差点感动哭了，一瞬间就是那种千言万语堵在了喉咙的感觉，什么话都说不出来，到了现在也很想念他们，但是每个人都有自己的路要走，虽然感谢和他们相遇，但是却不会再回去了，只期待后面有缘在相遇。&ensp;&ensp;&ensp;&ensp;我没有多么华丽的语言来形用我这不算精彩的精彩人生，虽然我不信命，但是我依旧很感谢幸运女神给我的照顾，依旧感谢与这些哥哥的相遇。其实这篇文章，并没有写一些关于工作的事情，写的相当于这一年多的缩影吧，经历了很多也成长了很多，开心过，高兴过，也颓废过，但是不管怎么样，都要做最好的自己的，坚信一句话，不忘初心，方得始终！！！]]></content>
      <categories>
        <category>linluochen</category>
      </categories>
      <tags>
        <tag>linluochen</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot 实战 ：入门篇]]></title>
    <url>%2F2019%2F06%2F11%2Findex%2F</url>
    <content type="text"><![CDATA[先说一下啥是 Spring Boot ?&ensp;&ensp;&ensp;&ensp;Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。Spring Boot 并不是用来替代 Spring 的解决方案，而是和 Spring 框架紧密结合用于提升 Spring 开发者体验的工具。同时它集成了大量常用的第三方库配置，Spring Boot应用中这些第三方库几乎可以是零配置的开箱即用（out-of-the-box），大部分的 Spring Boot 应用都只需要非常少量的配置代码（基于 Java 的配置），开发者能够更加专注于业务逻辑。（虽然我觉得写这个没多大意义吧。。但是还是要科普一下） Spring Boot 优势有哪些 ? （反正就是各种简化）&ensp;&ensp;&ensp;&ensp;1.创建独立的Spring应用程序&ensp;&ensp;&ensp;&ensp;2. 嵌入的Tomcat，无需部署WAR文件&ensp;&ensp;&ensp;&ensp;3. 简化Maven配置&ensp;&ensp;&ensp;&ensp;4. 自动配置Spring&ensp;&ensp;&ensp;&ensp;5. 提供生产就绪型功能，如指标，健康检查和外部配置&ensp;&ensp;&ensp;&ensp;6. 绝对没有代码生成并且对XML也没有配置要求 介绍到此结束，下面进入正题！！ 因为网上的许多部署的 Spring Boot 版本都有错误，所以呢，这里我们就简单的整合了一下，实话实说，博主也是第一次搭建 Boot 如有不足，请留言补充，先说一下我们的环境：&ensp;&ensp;&ensp;&ensp;首先说一下，我们这地方用的 Tk_MyBatis 其实就是 MyBatis ，只不过是把一些简单方法给封装了一下 类似于 Jpa 第一部分第一步创建项目开发环境 ：JDK1.8 – IDEA 2018.3 – MyBatis首先，搭建 Spring Boot 项目，这些地方我们就简单的写一下。。不做过多解释，我们主要看功能，以及可能会爆出的错误信息点击 File – New – Project 选择 Spring Initializr 默认 jdk 1.8 然后 Next 下图中红色标记的 这个就根据喜好定义就行了。。个人练习的话不是很重要（仅代表个人意见） 因为这个地方我们只是实现简单的增删改查，所以就选择几个能用到的就好了 最后输入我们的项目名称 创建完成后，看一下我们的项目结构（这个是我之前搭建好的结构） 第二步配置 Pom.xml 文件首先打开我们的 Pom.xml 文件，需要得内容我都已经贴在了下方，可以看看你们那些没有：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&lt;parent&gt; &lt;!-- 声明此工程是一个Spring Boot 应用 --&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;&lt;!-- 是一个很特殊的starter用来提供相关Maven默认的依赖，使用它后可以省略常用包的version --&gt; &lt;version&gt;2.1.4.RELEASE&lt;/version&gt; &lt;!-- 版本号 --&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;&lt;/parent&gt;&lt;groupId&gt;com.cs&lt;/groupId&gt;&lt;artifactId&gt;mybatis&lt;/artifactId&gt;&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&lt;name&gt;mybatis&lt;/name&gt;&lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;properties&gt; &lt;!-- JDK 版本 --&gt; &lt;java.version&gt;1.8&lt;/java.version&gt;&lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt;&lt;!-- Thymeleaf 模板引擎 --&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt;&lt;!-- 因为我们搭建的是 Web 应用 引用依赖 --&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;!-- Web 开发支持 默认使用 Tomcat 8 --&gt; &lt;/dependency&gt; &lt;dependency&gt;&lt;!-- MyBatis 依赖 --&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;2.0.1&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;!--Mybatis与SpringBoot的集成依赖--&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.1.1&lt;/version&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;dependency&gt;&lt;!--Mybatis与Spring的集成依赖--&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt; &lt;version&gt;1.3.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt;&lt;!-- MySQL 连接数据库的驱动程序 --&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt;&lt;!-- 这个依赖和测试相关，只要引入它，就会把所有与测试相关的包全部引入 --&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt;&lt;!-- 热部署 --&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt;&lt;!-- tk_MyBatis --&gt; &lt;groupId&gt;tk.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mapper-spring-boot-starter&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;tk.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mapper&lt;/artifactId&gt; &lt;version&gt;4.0.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt;&lt;!-- log4j 日志 --&gt; &lt;groupId&gt;log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j&lt;/artifactId&gt; &lt;version&gt;1.2.17&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt;&lt;!-- Tool 工具类 --&gt; &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt; &lt;artifactId&gt;gson&lt;/artifactId&gt; &lt;version&gt;2.8.5&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.jdom&lt;/groupId&gt; &lt;artifactId&gt;jdom2&lt;/artifactId&gt; &lt;version&gt;2.0.6&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; &lt;/project&gt; 第三步配置 application.properties 文件这个地方也有朋友喜欢用 yml 但是不巧这里就先只配置了 application.properties 的1234567891011121314151617181920# 自定义端口号 默认为 8080server.port = 8080# 添加 MySQL 数据库配置 127.0.0.1 作用和 localhost 一样spring.datasource.url=jdbc:mysql://127.0.0.1:3306/boot_dome?serverTimezone=UTC&amp;characterEncoding=UTF-8&amp;useUnicode=true# 用户名spring.datasource.username=root# 密码spring.datasource.password=root# 驱动spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver# Thymeleaf 配置 模板支持 HTML XML Text JavaScriptspring.thymeleaf.mode=HTML5# 编码，可不用配置spring.thymeleaf.encoding=utf-8# 内容类别，可不用配置spring.thymeleaf.content-type=text/html# 开发配置为 false 避免修改模板还要重启服务器spring.thymeleaf.cache=false# 配置模板路径，默认是 templates 可以不用配置spring.thymeleaf.prefix=classpath:/templates 这俩都配置好了之后，最起码可以保证项目能运行了。。哦哦哦不对。。还有一个地方 第四步配置主类加载文件也是最重要的一部分！！！就是我们项目的主类！！一般新建的项目是这个样子的然后我们再给他加上几个注解：123@ComponentScan(basePackages = "com.cs.mybatis.*") // 扫描主程序文件@MapperScan("com.cs.mybatis.mapper") // 扫描这个包下的 Mapper 文件@ServletComponentScan // 使用该注解后，Servlet Filter Listener 可以直接通过 第五步创建测试类测试运行新建建一个测试类，测试一下是否可以访问成功，写好测试方法之后，点击右上角绿色的三角按钮启动，上边也介绍了，SpringBoot 有内置的 Tomcat 所以不用我们来配置12345678910111213141516 /** * @ClassName TestController * @Author linluochen * @Date 2019/4/19 16:09 * @Version 1.0 **/@Controller // 声明这是一个 Controller 表示此类用于负责处理 Web 请求public class TestController &#123; @RequestMapping("Test") // 如果参数链接的请求的参数相同则调用此方法 @ResponseBody // 表示这个的返回值只一个文本不是一个视图路径 通常用于接收 AJAX 请求 public String Test()&#123; System.out.println("来了老弟？"); return "Hello World"; &#125; &#125; 页面输出结果为，同时查看控台也会有提示，这里就不贴图了。。 到这里，第一部分搭建项目就算完成了下面就是集成 MyBatis 进行增删改查 第二部分第一步创建新的包首先我们右键 New 一个 Package 包 然后创建好，model，mapper，service，serviceimpl 大概结构就是这个样子model 用来存放实体类mapper 和 service 用来放接口serviceimpl 业务逻辑层，简单来说就是实现接口业务的地方 第二步创建新的表首先，现在数据库创建一个表，表名可以随意，也可以跟着本教程：12345create table teacher( id int(11) primary key auto_increment, // 主键，自增 name varchar(30) , age int(11)) 第三步创建 Model 层然后创建 Model 层，这个地方我们可以反向生成得，博主文中也有反向生成工具：附上反向工具使用教程以及下载地址：https://blog.csdn.net/qq_36537546/article/details/887066841234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768package com.cs.mybatis.model; import java.io.Serializable;import javax.persistence.Column;import javax.persistence.Id;import javax.persistence.Table; import lombok.Data;import lombok.EqualsAndHashCode; @Data@EqualsAndHashCode(callSuper=false)@Table(name="teacher") // 数据库名对应public class Teacher implements Serializable &#123; // 序列化 private static final long serialVersionUID = 1L; /** * ID */ @Id // 声明主键 @Column(name = "id") // 与数据库字段名对应 private Integer id; /** * 名字 */ @Column(name = "name") private String name; /** * 年龄 */ @Column(name = "age") private Integer age; public Teacher()&#123; &#125; public Teacher( Integer id )&#123; this.id = id; &#125; public void setId(Integer id) &#123; this.id = id; &#125; public Integer getId() &#123; return this.id; &#125; public void setName(String name) &#123; this.name = name; &#125; public String getName() &#123; return this.name; &#125; public void setAge(Integer age) &#123; this.age = age; &#125; public Integer getAge() &#123; return this.age; &#125; &#125; 第四步创建 Mapper 层Mapper 层，这个地方我们集成了一下 Tk_MyBatis 相当于一个持久层 API 用过 Jpa 的朋友应该知道这个是啥意思，一般不是特别复杂的 sql 就不用在 Mapper 层写了，Tk 就可以搞定，当然如果是复杂的 sql 例如多表联合查询等还是要在Mapper操作的，如果实在不懂用法的话，可以给我留言评论，或者加我QQ，我会在最底部留下的，想了解详细用法的朋友可以看官方文档文档地址：https://github.com/abel533/Mapper/wiki/6.example 这里我们不做过多的介绍123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990 package com.cs.mybatis.mapper; import com.cs.mybatis.base.BaseMapper; import com.cs.mybatis.model.Teacher; import org.springframework.stereotype.Component; @Component public interface TeacherMapper extends BaseMapper&lt;Teacher&gt; &#123; // 这个地方我们调用的 Tk_MyBatis 持久层 API &#125;``` #### 第五步创建 Server 层**Service 层，这个就照常写就可以了**``` bash /* * Powered By [rapid-framework] * Web Site: http://www.rapid-framework.org.cn * Google Code: http://code.google.com/p/rapid-framework/ */ package com.cs.mybatis.service; import com.cs.mybatis.model.Teacher; import java.util.List; public interface TeacherService&#123; /** * @title: 查询全部 * @auther: linluochen * @date: 2019/5/5 10:28 */ List&lt;Teacher&gt; selectAll(); /** * @title: 增加 * @param: teacher * @auther: linluochen * @date: 2019/5/5 10:30 */ Integer insertSelective(Teacher teacher); &#125;``` **ServiceImpl 实现类，这个地方调用我们的 Mapper 虽然我们 Mapper 没有写东西，但是由于我们的 Mapper 继承了 Tk_MyBatis 里面的属性，所以可以直接调用简单的单表查询的方法**``` bash /* * Powered By [rapid-framework] * Web Site: http://www.rapid-framework.org.cn * Google Code: http://code.google.com/p/rapid-framework/ */ package com.cs.mybatis.service.impl; import com.cs.mybatis.mapper.TeacherMapper; import com.cs.mybatis.model.Teacher; import com.cs.mybatis.service.TeacherService; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import java.util.List; @Service public class TeacherServiceImpl implements TeacherService &#123; @Autowired // 自动装配 Bean TeacherMapper teacherMapper; /** * @title: 查询全部 * @auther: linluochen * @date: 2019/5/5 10:25 */ @Override public List&lt;Teacher&gt; selectAll() &#123; return teacherMapper.selectAll(); &#125; /** * @title: 新增 * @param: teacher * @auther: linluochen * @date: 2019/5/5 10:25 */ @Override public Integer insertSelective(Teacher teacher) &#123; return teacherMapper.insertSelective(teacher); &#125; &#125; 第六步创建测试类写完这些之后，我们去测试一下能不能用，在左侧有一个 test 文件夹，然后打开，如下图 打开后在里面写入要测试的方法，这个类呢，是我们的测试类，所有的可执行操作都可以在这个里面进行测试，不过多解释，注解已经写得很清楚了，然后写完之后运行我们写的测试方法，在左侧会有一个绿色的三角标志，然后点击运行1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556package com.cs.mybatis; import com.cs.mybatis.model.Teacher;import com.cs.mybatis.service.TeacherService;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner; import javax.annotation.Resource;import java.util.List; @RunWith(SpringRunner.class)@SpringBootTest // 声明这个是一个 TestControllerpublic class MybatisApplicationTests &#123; @Resource // 自动装配 Bean 用来调用你定义的方法 TeacherService teacherService; @Test public void contextLoads() &#123; &#125; /** * @title: boot + mybatis selectAll() * @auther: linluochen * @date: 2019/5/5 10:41 */ @Test // 声明这个是个 TestClass public void TeacherSelectAll()&#123; List&lt;Teacher&gt; teachersList = teacherService.selectAll(); // 获取实现类的方法 for (Teacher teacher:teachersList) &#123; // foreach 循环遍历 System.out.println("ID："+teacher.getId()+" "+"姓名："+teacher.getName()+" "+"年龄："+teacher.getAge()); &#125; &#125; /** * @title: boot + mybatis insertSelective() * @param: teacher * @auther: linluochen * @date: 2019/5/5 10:41 */ @Test // 声明这个是个 TestClass public void TeacherInsertSelective()&#123; Teacher teacher = new Teacher(); // new 一个对象 teacher.setName("小明"); // set 放值 teacher.setAge(16); // set 放值 Integer thy = teacherService.insertSelective(teacher); // 调用方法 成功返回 1 失败返回 0 if(thy == 1)&#123; // 进行判断 System.out.println("成功"); &#125;else&#123; System.out.println("失败"); &#125; &#125; &#125; 查看我们的运行结果，可以在控制台看到我们的执行结果 欢迎留言评论，附赠上我们的项目链接：https://download.csdn.net/download/qq_36537546/11160569]]></content>
      <categories>
        <category>boot</category>
      </categories>
      <tags>
        <tag>boot</tag>
      </tags>
  </entry>
</search>
